<div class="container" style="padding: 10px;">
    <div class="pagetitle">
      <h1>Recommender</h1>
      <nav>
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item">Recommender</li>
        </ol>
      </nav>
    </div><!-- End Page Title -->
    <div class="card">
      <div class="card-body">
        <button type="button" class="btn btn-custom-danger btn-sm" style= "display: block; margin-left: auto; margin-right: 0;">
        <%= link_to("Update user data from ClickUp","/recommenders/update_clickup", class: "nav-link active", style: "text-decoration: none; color: black;")%></button>
        <h5 class="card-title">
        <br/>
        <!-- Select task -->
        <select id="task-top">
          <% @tasks.each_with_index do |task, i| %>
            <option value="<%= i.to_s%>"><%= task[:name]%></option>
          <% end %>
        </select>
        &nbsp;<button id="button" onclick="selectTask()" class="btn btn-custom-success btn-sm" ><i class="fa-solid fa-play" style="color: white;"></i></button>
        <!-- End Select task -->

        <!-- Active Table -->
        <table class="table table-borderless">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">Name</th>
              <th scope="col">Position</th>
              <th scope="col">Availability</th>
              <th scope="col">Contact</th>
            </tr>
          </thead>
          <% color_status = {'available' => 'success', 'normal' =>  'info', 'busy' => 'danger' } %>
          <% User.find(1).tasks.last(3).each_with_index do |task, i|%>
            <tbody id= "task-top-<%=i.to_s%>" style="display: none;">
              <tr style="background-color: lightblue; padding: 3px;">
                <td></td>
                <td><%= task.name%></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <% task.users.each_with_index do |user, j|%>
                  <tr>
                    <th scope="row"><%= j+1%></th>
                    <td><%= user.username%></td>
                    <td><%= user.role%></td>
                    <td><button type="button" class="btn btn-outline-<%=color_status[user.last_status]%>">
                    <div class="popup-<%=i.to_s%>-<%= user.id.to_s%>" onclick="fs_<%=i.to_s%>[<%= user.id.to_s%>]()"><%= user.last_status%>
                      <span class="popuptext-<%=i.to_s%>-<%= user.id.to_s%>" id="myPopup-<%=i.to_s%>-<%= user.id.to_s%>"><%= user.comment%></span>
                    </div></button></td>
                    <td><i class="far fa-comment"></i> <% if user.last_status == 'available' %><i class="fa fa-smile" aria-hidden="true"></i><% end %></td>
                  </tr>
              <% end %>
            </tbody>
          <% end %>
        </table>
        <!-- End Tables without borders -->
        <script>
        const button = document.querySelector('#button');
        const task = document.querySelector('#task-top');

        var selectedValue;
        var fs_0 = [];
        var fs_1 = [];
        var fs_2 = [];
        var fs_3 = [];
        var fs_4 = [];

        function selectTask() {
          button.onclick = (e) => {
            e.preventDefault();
            selectedValue = [].filter
                .call(task.options, option => option.selected)
                .map(option => option.value)[0];

            // console.log('selectedValue:',selectedValue);

            for (var i=0, n=task.options.length;i<n;i++) {
              var x = document.getElementById("task-top-"+i);
              i == selectedValue ? x.style.display = "" : x.style.display = "none"
            }
          };
          // When the user clicks on div, open the popup :NEED TO FIX, message shown without clicking it
          var show = ["show-"+selectedValue+"-1", "show-"+selectedValue+"-2", "show-"+selectedValue+"-3", "show-"+selectedValue+"-4", "show-"+selectedValue+"-5", "show-"+selectedValue+"-6", "show-"+selectedValue+"-7"];
          var myPopup = ["myPopup-"+selectedValue+"-1", "myPopup-"+selectedValue+"-2", "myPopup-"+selectedValue+"-3", "myPopup-"+selectedValue+"-4", "myPopup-"+selectedValue+"-5", "myPopup-"+selectedValue+"-6", "myPopup-"+selectedValue+"-7"];
          for (let x = 0; x < 7; x++){
              window["fs_"+selectedValue].push( function() {
                // console.log(myPopup[x-1]);
                var popup = document.getElementById(myPopup[x-1]);
                popup.classList.toggle(show[x-1]);
              });
          }
        }
        </script>

        <!-- Sort task -->
        <div class="card">
          <div class="card-body">
            <h5 class="card-title">Sort task</h5>
            <p>Select <code>characteristics of task</code> to gain ideas of tasks you are looking for.</p>
            <div class="row mb-5">
                <label class="col-sm-2 col-form-label">Required skills</label>
                <div class="col-sm-11" style= "text-align: right; margin: 10px;">
                    <% ['Complexity', 'Priority', 'Duration', 'Front-end', 'Back-end', 'Infrastructure', 'Data-manipulation'].each_with_index do |skill, i|%>
                      <label for="customRange1" class="form-label"><%= skill%>:&nbsp;</label>
                      <label data-toggle="collapse" data-target="#toggle<%=i.to_s%>" class="switch">
                          <input type="checkbox">
                          <span class="slider round"></span>
                      </label>
                      <div class="range" id="toggle<%=i.to_s%>">
                        <input type="range" class="form-range" style="position: absolute; right: 300px; width: 50%;" min="0" max="100" step="0.2" id="customRange1">
                        <span style= "padding: 70px;">50&nbsp;&nbsp;</span>
                      </div>
                      <hr/>
                    <% end %>
                    <label class="sort-analyze">
                      <button id="sort-btn" class="btn btn-custom-danger btn-sm" >Analyze</button>
                    </label>
                </div>
            </div>
            <script>
              var elem = document.getElementsByClassName('range');
              var swit = document.getElementsByClassName('switch');

              var scoreList=[];
              var toggleList=[];
              var rangeValue = function (elem, target) {
            　 　　return function(evt){
            　　　 　　target.innerHTML = elem.value;
            　　　}
            　 }
            　 for(var i = 0, max = elem.length; i < max; i++){
            　　　bar = elem[i].getElementsByTagName('input')[0];
            　　　target = elem[i].getElementsByTagName('span')[0];
            　　　tog = swit[i].getElementsByTagName('input')[0];

                 scoreList.push(bar);
                 toggleList.push(tog);
                 // console.log('i: ',i,' bar:', bar, ' target: ', target);
            　　  bar.addEventListener('input', rangeValue(bar, target));
            　 }
              const sort_btn = document.querySelector('#sort-btn');
              console.log("selectedValue at sort: ", selectedValue);
              function getDifference(a, b) {
                return Math.abs(a - b);
              }
              var scores = [<%=@scores[0]%>,
                            <%=@scores[1]%>,
                            <%=@scores[2]%>,
                            <%=@scores[3]%>,
                            <%=@scores[4]%>,
                            <%=@scores[5]%>];
              sort_btn.onclick = (e) => {
                  console.log("selectedValue at sort: ", selectedValue);
                  var score = scores[selectedValue];
                  console.log(getDifference(-10, 10));
                  var sum=0;
                  for(var i = 0, max = scoreList.length; i < max; i++){
                    console.log("value[", i, "]: ", scoreList[i].value);
                    console.log("toggle[", i, "]: ", toggleList[i].checked);
                    console.log("score[", i, "]: ", score[i]);
                    console.log("diff[", i, "]: ", getDifference(scoreList[i].value, score[i]));
                    if (toggleList[i].checked == true) sum= sum + getDifference(scoreList[i].value, score[i]);
                    console.log("sum[", i, "]: ", sum);
                  }
                  //t_scores[0].getElementsByTagName('th')[0] task name
              };
            </script>
            <!-- Table Variants -->
            <table class="table">
              <thead>
                <tr>
                  <th scope="col">Task</th>
                  <th scope="col">Complexity</th>
                  <th scope="col">Priority</th>
                  <th scope="col">Duration</th>
                  <th scope="col">Front-end</th>
                  <th scope="col">Back-end</th>
                  <th scope="col">Infrastructure</th>
                  <th scope="col">Data-manipulation</th>
                  <th scope="col">Diff-score</th>
                </tr>
              </thead>
              <tbody class= "task_score">
                <% @task_name_list.each_with_index do |task, i| #for now, consider that @task_name_list[i] has @scores[i]%>
                <tr>
                  <th scope="row"><a href="<%= task.url%>"><%=task.name%></a></th>
                  <% (0..6).to_a.each do |j|%>
                    <td><%=@scores[i][j]%></td>
                  <% end %>
                  <td></td>
                </tr>
                <% end %>
              </tbody>
            </table>
            <script>
              var t_scores = document.getElementsByClassName('task_score')[0];
              console.log('t_scores: ', t_scores);
              sort_btn.onclick = (e) => {
                var sums= [0, 0, 0, 0, 0, 0];
                var sums_map= new Map;
                var sums_sorted;
                var indexes;
                var old_tasks = [];
                console.log("selectedValue at sort: ", selectedValue);
                for(var i = 0, max_i = scores.length; i < max_i; i++){
                    console.log("i: ", i);
                  for(var j = 0, max_j = scoreList.length; j < max_j; j++){
                    console.log("value[", j, "]: ", scoreList[j].value);
                    console.log("toggle[", j, "]: ", toggleList[j].checked);
                    console.log("scores[", i, "][", j, "]: ", scores[i][j]);
                    console.log("diff[", i, "]: ", getDifference(scoreList[j].value, scores[i][j]));
                    // only if toggle is enabled, calculate the difference
                    if (toggleList[j].checked == true) sums[i]= sums[i] + getDifference(scoreList[j].value, scores[i][j]);
                    console.log("sums[", i, "]: ", sums[i]);
                  }
                  console.log("DONE sums[", i, "]: ", sums[i]);
                }
                console.log("!!!DONE sums: ", sums);
                for (let [index, value] of sums.entries()) {
                  sums_map.set(index, value)
                }
                sums_sorted = new Map([...sums_map.entries()].sort((a, b) => a[1] - b[1]));
                console.log("sum_sorted: ",sums_sorted);
                indexes = Array.from(sums_sorted.keys());
                console.log("indexes: ",indexes);
                // reorder the task list according to the amount of the sum of differences
                // 1. store current task name, scores into map
                let ind=0;
                tr_list = t_scores.getElementsByTagName('tr')
                for (let tr_ele of tr_list) {
                  th_ele = tr_list[ind].getElementsByTagName('th')[0];
                  a_ele = th_ele.getElementsByTagName('a')[0];
                  a_ele.getAttribute('href');
                  task_link = a_ele.getAttribute('href');
                  task_name = a_ele.innerHTML;
                  old_tasks.push([task_name, task_link]);
                  console.log('task_name[',ind,']: ', task_name);
                  ind++;
                }
                console.log('old_tasks: ', old_tasks);

                // 2. replace the values acccording to the changed order of indexes
                let cnt = 0;
                let sum_list = Array.from(sums_sorted.values());
                var updateTaskName = function (updated_task, target) {
            　 　　return function(evt){
                     console.log('target: ', target, ' updated_task: ', updated_task);
            　　　 　　target.innerHTML = updated_task;
              　　 }
              　}
                var updateTaskLink = function (updated_task, target) {
            　 　　return function(evt){
                     console.log('target: ', target, ' updated_task: ', updated_task);
            　　　 　　target.href = updated_task;
              　　 }
              　}
                tmp_scores=[];
                for (let index of indexes) {
              　　 target = t_scores.getElementsByTagName('tr')[cnt];
                  console.log('target: ', target, ' cnt: ', cnt);

                  target_a = target.getElementsByTagName('a')[0];
                  console.log('target_a: ', target_a, 'old_tasks[index][0]: ', old_tasks[index][0], 'old_tasks[index][1]: ', old_tasks[index][1]);
              // 　　 updateTaskName(old_tasks[index][0], target_a);
              // 　　 updateTaskLink(old_tasks[index][1], target_a);
                  document.getElementsByClassName('task_score')[0].getElementsByTagName('tr')[cnt].getElementsByTagName('a')[0].innerHTML=old_tasks[index][0];
                  document.getElementsByClassName('task_score')[0].getElementsByTagName('tr')[cnt].getElementsByTagName('a')[0].href=old_tasks[index][1];
                  tmp_scores_row=[];
                 for(let ii = 0; ii < 7; ii++){
                    tmp_scores_row.push(scores[index][ii]);
                    console.log('ii: ', i, 'score:', scores[index][ii], 'cnt: ', cnt);
                    document.getElementsByClassName('task_score')[0].getElementsByTagName('tr')[cnt].getElementsByTagName('td')[ii].innerHTML=scores[index][ii];
                 }
                  console.log('sum_list[',cnt, ']: ', sum_list[cnt]);
                  document.getElementsByClassName('task_score')[0].getElementsByTagName('tr')[cnt].getElementsByTagName('td')[7].innerHTML=sum_list[cnt];

                 tmp_scores.push(tmp_scores_row);
                  cnt++;
            　   }
                sum_list=[];
                console.log('scores:', scores, 'tmp_scores: ', tmp_scores, '!!!sum_list[', cnt, ']: ', sum_list[cnt]);
                scores = tmp_scores;
              }
            </script>
            <!-- Pagination with icons -->
            <nav aria-label="Page navigation example">
              <ul class="pagination">
                <li class="page-item">
                  <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
                <li class="page-item"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                  <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              </ul>
            </nav><!-- End Pagination with icons -->
            <!-- End Table Variants -->

          </div>
        </div>
        <!-- End Sort task -->
      </div>
    </div>


    <div class="row">
        <div class="col-lg-6">
        <div class="card">
            <div class="card-body">
            <h5 class="card-title">Task similarity</h5>
            <label for="task-selection">&nbsp;</label>
            <select id="task-selection" style="position: absolute; right: 25px;">
              <% @radar_scores.each do |task| %>
                <option value="<%= task[:name]%>-<%= task[:scores].to_s[1..-2]%>"><%= task[:name]%></option>
              <% end %>
            </select>
            <button id="btn" class="btn btn-custom-danger btn-sm" style="position: absolute; right: 25px; top: 120px;">Analyze</button>

            <!-- Radar Chart -->
            <canvas id="radarChart" style="max-height: 400px;"></canvas>
            <script>
                var radarChart;
                document.addEventListener("DOMContentLoaded", () => {
                  radarChart = new Chart(document.querySelector('#radarChart'), {
                    type: 'radar',
                    data: {
                    labels: [
                        'Complexity',
                        'Priority',
                        'Duration',
                        'Front-end',
                        'Back-end',
                        'Infrastructure',
                        'Data-manipulation'
                    ],
                    datasets: [{
                        label: 'Your task',
                        data: [65, 59, 90, 81, 56, 55, 78],
                        fill: true,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgb(255, 99, 132)',
                        pointBackgroundColor: 'rgb(255, 99, 132)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgb(255, 99, 132)'
                    }, {
                        label: 'Integration for AAA',
                        data: [60.2, 33.2, 43.6, 16.8, 25.5, 53.8, 81.2],
                        fill: true,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgb(54, 162, 235)',
                        pointBackgroundColor: 'rgb(54, 162, 235)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgb(54, 162, 235)'
                    }]
                    },
                    options: {
                    elements: {
                        line: {
                        borderWidth: 3
                        }
                    }
                    }
                  });
                });
                const btn = document.querySelector('#btn');
                const sb = document.querySelector('#task-selection');

                var selectedValues;

                btn.onclick = (e) => {
                    e.preventDefault();
                    selectedValues = [].filter
                        .call(sb.options, option => option.selected)
                        .map(option => option.value);
                    // console.log('selected:',selectedValues);
                    updateChart();
                };

                function updateChart(){
                  var array = selectedValues[0].split(/[-,]/);
                  // console.log('array:', array);
                  var name = array[0];
                  var score = [array[1], array[2], array[3], array[4], array[5], array[6], array[7]];
                  radarChart.data.datasets[0].label =  name;
                  radarChart.data.datasets[0].data = score;
                  var num = (Math.floor(Math.random() * 10) + 1)%3;
                  var name_list = ['<%=@analyzed_names[0]%>', '<%=@analyzed_names[1]%>', '<%=@analyzed_names[2]%>']; //need to show the tasks which has highly similar to the task of each of them
                  var score_list = [<%=@scores[0]%>,
                                    <%=@scores[1]%>,
                                    <%=@scores[2]%>];
                  radarChart.data.datasets[1].label =  name_list[num];
                  radarChart.data.datasets[1].data = score_list[num];
                  radarChart.update();
                }
            </script>
            <!-- End Radar CHart -->

            </div>
        </div>
        </div>

        <div class="col-lg-6">
        <div class="card">
            <div class="card-body">
            <h5 class="card-title">Help needed</h5>
            <p>This is generated by <code>analysis of skill, experience compatibility with task, status of task</code>, also <code>request</code> can be sent by each worker when they need.
             number shows greater if you have a matched skill, experience, availability to help out</p>

            <!-- Polar Area Chart -->
            <canvas id="polarAreaChart" style="max-height: 400px;"></canvas>
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                new Chart(document.querySelector('#polarAreaChart'), {
                    type: 'polarArea',
                    data: {
                    labels: [
                      <% @names.each_with_index do |name, i|%>
                         '<%= name%>'
                          <% if @names.count-1 != i%>
                          ,
                          <% end %>
                      <% end %>
                    ],
                    datasets: [{
                        label: 'My First Dataset',
                        data: [
                        <% @analysis.each_with_index do |num, i|%>
                         <%= num%>
                          <% if @analysis.count-1 != i%>
                          ,
                          <% end %>
                         <% end %>],
                        backgroundColor: [
                        'rgb(255, 99, 132)',
                        'rgb(75, 192, 192)',
                        'rgb(255, 205, 86)',
                        'rgb(201, 203, 207)',
                        'rgb(54, 162, 235)'
                        ]
                    }]
                    }
                });
                });
            </script>
            <!-- End Polar Area Chart -->

            </div>
        </div>
        </div>


    </div>
    </section>

  <!-- ======= Footer ======= -->
  <footer id="footer" class="footer">
    <div class="copyright">
      &copy; Copyright <strong><span>NiceAdmin</span></strong>. All Rights Reserved
    </div>
    <div class="credits">
      <p>Chart.JS Examples. You can check the <a href="https://www.chartjs.org/docs/latest/samples/" target="_blank">official website</a> for more examples.</p>
      <!-- All the links in the footer should remain intact. -->
      <!-- You can delete the links only if you purchased the pro version. -->
      <!-- Licensing information: https://bootstrapmade.com/license/ -->
      <!-- Purchase the pro version with working PHP/AJAX contact form: https://bootstrapmade.com/nice-admin-bootstrap-admin-html-template/ -->
      Designed by <a href="https://bootstrapmade.com/">BootstrapMade</a>
    </div>
  </footer><!-- End Footer -->
</div>

  <!-- Vendor JS Files -->
  <script src="/assets/vendor/apexcharts/apexcharts.min.js"></script>
  <script src="/assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="/assets/vendor/chart.js/chart.min.js"></script>
  <script src="/assets/vendor/echarts/echarts.min.js"></script>
  <script src="/assets/vendor/quill/quill.min.js"></script>
  <script src="/assets/vendor/simple-datatables/simple-datatables.js"></script>
  <script src="/assets/vendor/tinymce/tinymce.min.js"></script>
  <script src="/assets/vendor/php-email-form/validate.js"></script>

  <!-- Template Main JS File -->
  <script src="/assets/js/main.js"></script>

    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

  <!-- Vendor JS Files -->
  <script src="assets/vendor/apexcharts/apexcharts.min.js"></script>
  <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="assets/vendor/chart.js/chart.min.js"></script>
  <script src="assets/vendor/echarts/echarts.min.js"></script>
  <script src="assets/vendor/quill/quill.min.js"></script>
  <script src="assets/vendor/simple-datatables/simple-datatables.js"></script>
  <script src="assets/vendor/tinymce/tinymce.min.js"></script>
  <script src="assets/vendor/php-email-form/validate.js"></script>

  <!-- Template Main JS File -->
  <script src="assets/js/main.js"></script>
<script>

</script>
